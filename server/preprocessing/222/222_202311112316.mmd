# Get To The Point: Summarization with Pointer-Generator Networks

Abigail See

Stanford University

abisee@stanford.edu

Peter J. Liu

Google Brain

peterjliu@google.com

Christopher D. Manning

Stanford University

manning@stanford.edu

###### Abstract

Neural sequence-to-sequence models have provided a viable new approach for _abstractive_ text summarization (meaning they are not restricted to simply selecting and rearranging passages from the original text). However, these models have two shortcomings: they are liable to reproduce factual details inaccurately, and they tend to repeat themselves. In this work we propose a novel architecture that augments the standard sequence-to-sequence attentional model in two orthogonal ways. First, we use a hybrid pointer-generator network that can copy words from the source text via _pointing_, which aids accurate reproduction of information, while retaining the ability to produce novel words through the _generator_. Second, we use _coverage_ to keep track of what has been summarized, which discourages repetition. We apply our model to the _CNN / Daily Mail_ summarization task, outperforming the current abstractive state-of-the-art by at least 2 ROUGE points.

## 1 Introduction

Summarization is the task of condensing a piece of text to a shorter version that contains the main information from the original. There are two broad approaches to summarization: _extractive_ and _abstractive_. _Extractive methods_ assemble summaries exclusively from passages (usually whole sentences) taken directly from the source text, while _abstractive methods_ may generate novel words and phrases not featured in the source text - as a human-written abstract usually does. The extractive approach is easier, because copying large chunks of text from the source document ensures baseline levels of grammaticality and accuracy. On the other hand, sophisticated abilities that are crucial to high-quality summarization, such as paraphrasing, generalization, or the incorporation of real-world knowledge, are possible only in an abstractive framework (see Figure 5).

Due to the difficulty of abstractive summarization, the great majority of past work has been extractive [19, 14, 20, 21]. However, the recent success of _sequence-to-sequence_ models [23],

Figure 1: Comparison of output of 3 abstractive summarization models on a news article. The baseline model makes factual errors, a nonsensical sentence and struggles with OOV words _muhammadu buhari_. The pointer-generator model is accurate but **repeats itself**. Coverage eliminates repetition. The final summary is composed from several fragments.

et al., 2014), in which recurrent neural networks (RNNs) both read and freely generate text, has made abstractive summarization viable (Chopra et al., 2016; Nallapati et al., 2016; Rush et al., 2015; Zeng et al., 2016). Though these systems are promising, they exhibit undesirable behavior such as inaccurately reproducing factual details, an inability to deal with out-of-vocabulary (OOV) words, and repeating themselves (see Figure 1).

In this paper we present an architecture that addresses these three issues in the context of multi-sentence summaries. While most recent abstractive work has focused on headline generation tasks (reducing one or two sentences to a single headline), we believe that longer-text summarization is both more challenging (requiring higher levels of abstraction while avoiding repetition) and ultimately more useful. Therefore we apply our model to the recently-introduced _CNN/ Daily Mail_ dataset (Hermann et al., 2015; Nallapati et al., 2016), which contains news articles (39 sentences on average) paired with multi-sentence summaries, and show that we outperform the state-of-the-art abstractive system by at least 2 ROUGE points.

Our hybrid _pointer-generator_ network facilitates copying words from the source text via _pointing_(Vinyals et al., 2015), which improves accuracy and handling of OOV words, while retaining the ability to _generate_ new words. The network, which can be viewed as a balance between extractive and abstractive approaches, is similar to Gu et al.'s (2016) CopyNet and Miao and Blunsom's (2016) Forced-Attention Sentence Compression, that were applied to short-text summarization. We propose a novel variant of the _coverage vector_(Tu et al., 2016) from Neural Machine Translation, which we use to track and control coverage of the source document. We show that coverage is remarkably effective for eliminating repetition.

## 2 Our Models

In this section we describe (1) our baseline sequence-to-sequence model, (2) our pointer-generator model, and (3) our coverage mechanism that can be added to either of the first two models. The code for our models is available online.1

Footnote 1: www.github.com/abisee/pointer-generator

### Sequence-to-sequence attentional model

Our baseline model is similar to that of Nallapati et al. (2016), and is depicted in Figure 2. The tokens of the article \(w_{i}\) are fed one-by-one into the encoder (a single-layer bidirectional LSTM), producing a sequence of _encoder hidden states_\(h_{i}\). On each step \(t\), the decoder (a single-layer unidirectional LSTM) receives the word embedding of the previous word (while training, this is the previous word of the reference summary; at test time it is the previous word emitted by the decoder), and has _decoder state_\(s_{t}\). The _attention distribution_\(a^{t}\) is calculated as in Bahdanau et al. (2015):

\[e^{\prime}_{i} =v^{T}\tanh(W_{h}h_{i}+W_{s}s_{t}+b_{\text{attn}}) \tag{1}\] \[a^{t} =\text{softmax}\big{(}e^{\prime}\big{)} \tag{2}\]

where \(v\), \(W_{h}\), \(W_{s}\) and \(b_{\text{attn}}\) are learnable parameters. The attention distribution can be viewed as

Figure 2: Baseline sequence-to-sequence model with attention. The model may attend to relevant words in the source text to generate novel words, e.g., to produce the novel word _beat_ in the abstractive summary _Germany_**_beat_**_Argentina 2-0_ the model may attend to the words _victorious_ and _win_ in the source text.

a probability distribution over the source words, that tells the decoder where to look to produce the next word. Next, the attention distribution is used to produce a weighted sum of the encoder hidden states, known as the _context vector_\(h_{t}^{*}\):

\[h_{t}^{*}=\sum_{i}d_{i}^{\prime}h_{i} \tag{3}\]

The context vector, which can be seen as a fixed-size representation of what has been read from the source for this step, is concatenated with the decoder state \(s_{t}\) and fed through two linear layers to produce the vocabulary distribution \(P_{\text{vocab}}\):

\[P_{\text{vocab}}=\text{softmax}(V^{\prime}(V[s_{t},h_{t}^{*}]+b)+b^{\prime}) \tag{4}\]

where \(V\), \(V^{\prime}\), \(b\) and \(b^{\prime}\) are learnable parameters. \(P_{\text{vocab}}\) is a probability distribution over all words in the vocabulary, and provides us with our final distribution from which to predict words \(w\):

\[P(w)=P_{\text{vocab}}(w) \tag{5}\]

During training, the loss for timestep \(t\) is the negative log likelihood of the target word \(w_{t}^{*}\) for that timestep:

\[\text{loss}_{t}=-\log P(w_{t}^{*}) \tag{6}\]

and the overall loss for the whole sequence is:

\[\text{loss}=\frac{1}{T}\sum_{t=0}^{T}\text{loss}_{t} \tag{7}\]

### Pointer-generator network

Our pointer-generator network is a hybrid between our baseline and a pointer network [20], as it allows both copying words via pointing, and generating words from a fixed vocabulary. In the pointer-generator model (depicted in Figure 3) the attention distribution \(a^{\prime}\) and context vector \(h_{t}^{*}\) are calculated as in section 2.1. In addition, the _generation probability_\(p_{\text{gen}}\in[0,1]\) for timestep \(t\) is calculated from the context vector \(h_{t}^{*}\), the decoder state \(s_{t}\) and the decoder input \(x_{t}\):

\[p_{\text{gen}}=\sigma(w_{h^{*}}^{T}h_{t}^{*}+w_{s}^{T}s_{t}+w_{x}^{T}x_{t}+b_{ \text{ptr}}) \tag{8}\]

where vectors \(w_{h^{*}}\), \(w_{s}\), \(w_{x}\) and scalar \(b_{\text{ptr}}\) are learnable parameters and \(\sigma\) is the sigmoid function. Next, \(p_{\text{gen}}\) is used as a soft switch to choose between _generating_ a word from the vocabulary by sampling from \(P_{\text{vocab}}\), or _copying_ a word from the input sequence by sampling from the attention distribution \(a^{\prime}\). For each document let the _extended vocabulary_ denote the union of the vocabulary, and all words appearing in the source document. We obtain the following probability distribution over the extended vocabulary:

\[P(w)=p_{\text{gen}}P_{\text{vocab}}(w)+(1-p_{\text{gen}})\sum_{i:w_{i}=w}a_{i} ^{\prime} \tag{9}\]

Note that if \(w\) is an out-of-vocabulary (OOV) word, then \(P_{\text{vocab}}(w)\) is zero; similarly if \(w\) does

Figure 3: Pointer-generator model. For each decoder timestep a generation probability \(p_{\text{gen}}\in[0,1]\) is calculated, which weights the probability of _generating_ words from the vocabulary, versus _copying_ words from the source text. The vocabulary distribution and the attention distribution are weighted and summed to obtain the final distribution, from which we make our prediction. Note that out-of-vocabulary article words such as _2-0_ are included in the final distribution. Best viewed in color.

not appear in the source document, then \(\sum_{i:w_{i}=w}a_{i}^{\prime}\) is zero. The ability to produce OOV words is one of the primary advantages of pointer-generator models; by contrast models such as our baseline are restricted to their pre-set vocabulary.

The loss function is as described in equations (6) and (7), but with respect to our modified probability distribution \(P(w)\) given in equation (9).

### Coverage mechanism

Repetition is a common problem for sequence-to-sequence models (Tu et al., 2016; Mi et al., 2016; Sankaran et al., 2016; Suzuki and Nagata, 2016), and is especially pronounced when generating multi-sentence text (see Figure 1). We adapt the _coverage model_ of Tu et al. (2016) to solve the problem. In our coverage model, we maintain a _coverage vector_\(c^{\prime}\), which is the sum of attention distributions over all previous decoder timesteps:

\[c^{\prime}=\sum_{t^{\prime}=0}^{t-1}a^{\prime} \tag{10}\]

Intuitively, \(c^{\prime}\) is a (unnormalized) distribution over the source document words that represents the degree of coverage that those words have received from the attention mechanism so far. Note that \(c^{0}\) is a zero vector, because on the first timestep, none of the source document has been covered.

The coverage vector is used as extra input to the attention mechanism, changing equation (1) to:

\[e_{i}^{\prime}=v^{T}\tanh(W_{h}h_{i}+W_{s}s_{t}+w_{c}c_{i}^{\prime}+b_{\rm attn }) \tag{11}\]

where \(w_{c}\) is a learnable parameter vector of same length as \(v\). This ensures that the attention mechanism's current decision (choosing where to attend next) is informed by a reminder of its previous decisions (summarized in \(c^{\prime}\)). This should make it easier for the attention mechanism to avoid repeatedly attending to the same locations, and thus avoid generating repetitive text.

We find it necessary (see section 5) to additionally define a _coverage loss_ to penalize repeatedly attending to the same locations:

\[\text{covloss}_{t}=\sum_{i}\min(a_{i}^{\prime},c_{i}^{\prime}) \tag{12}\]

Note that the coverage loss is bounded; in particular \(\text{covloss}_{t}\leq\sum_{i}a_{i}^{\prime}=1\). Equation (12) differs from the coverage loss used in Machine Translation. In MT, we assume that there should be a roughly one-to-one translation ratio; accordingly the final coverage vector is penalized if it is more or less than 1. Our loss function is more flexible: because summarization should not require uniform coverage, we only penalize the overlap between each attention distribution and the coverage so far - preventing repeated attention. Finally, the coverage loss, reweighted by some hyperparameter \(\lambda\), is added to the primary loss function to yield a new composite loss function:

\[\text{loss}_{t}=-\log P(w_{t}^{*})+\lambda\sum_{i}\min(a_{i}^{\prime},c_{i}^{ \prime}) \tag{13}\]

## 3 Related Work

**Neural abstractive summarization.**Rush et al. (2015) were the first to apply modern neural networks to abstractive text summarization, achieving state-of-the-art performance on DUC-2004 and Gigaword, two sentence-level summarization datasets. Their approach, which is centered on the attention mechanism, has been augmented with recurrent decoders (Chopra et al., 2016), Abstract Meaning Representations (Takase et al., 2016), hierarchical networks (Nallapati et al., 2016), variational autoencoders (Miao and Blunsom, 2016), and direct optimization of the performance metric (Ranzato et al., 2016), further improving performance on those datasets.

However, large-scale datasets for summarization of _longer_ text are rare. Nallapati et al. (2016) adapted the DeepMind question-answering dataset (Hermann et al., 2015) for summarization, resulting in the _CNN/Daily Mail_ dataset, and provided the first abstractive baselines. The same authors then published a neural _extractive_ approach (Nallapati et al., 2017), which uses hierarchical RNNs to select sentences, and found that it significantly outperformed their abstractive result with respect to the ROUGE metric. To our knowledge, these are the only two published results on the full dataset.

Prior to modern neural methods, abstractive summarization received less attention than extractive summarization, but Jing (2000) explored cutting unimportant parts of sentences to create summaries, and Cheung and Penn (2014) explore sentence fusion using dependency trees.

**Pointer-generator networks.** The pointer network (Vinyals et al., 2015) is a sequence-to-sequence model that uses the soft attention distribution of Bahdanau et al. (2015) to produce an output sequence consisting of elements from the input sequence. The pointer network has been used to create hybrid approaches for NMT (Gulcehre et al., 2016), language modeling (Merity et al., 2016), and summarization (Gu et al., 2016; Gulcehre et al., 2016; Miao and Blunsom, 2016; Nallapati et al., 2016; Zeng et al., 2016).

Our approach is close to the Forced-Attention Sentence Compression model of Miao and Blunsom (2016) and the CopyNet model of Gu et al. (2016), with some small differences: (i) We calculate an explicit switch probability \(p_{\text{gen}}\), whereas Gu et al. induce competition through a shared softmax function. (ii) We recycle the attention distribution to serve as the copy distribution, but Gu et al. use two separate distributions. (iii) When a word appears multiple times in the source text, we sum probability mass from all corresponding parts of the attention distribution, whereas Miao and Blunsom do not. Our reasoning is that (i) calculating an explicit \(p_{\text{gen}}\) usefully enables us to raise or lower the probability of all generated words or all copy words at once, rather than individually, (ii) the two distributions serve such similar purposes that we find our simpler approach suffices, and (iii) we observe that the pointer mechanism often copies a word while attending to multiple occurrences of it in the source text.

Our approach is considerably different from that of Gulcehre et al. (2016) and Nallapati et al. (2016). Those works train their pointer components to activate only for out-of-vocabulary words or named entities (whereas we allow our model to freely learn when to use the pointer), and they do not mix the probabilities from the copy distribution and the vocabulary distribution. We believe the mixture approach described here is better for abstractive summarization - in section 6 we show that the copy mechanism is vital for accurately reproducing rare but in-vocabulary words, and in section 7.2 we observe that the mixture model enables the language model and copy mechanism to work together to perform abstractive copying.

**Coverage.** Originating from Statistical Machine Translation (Koehn, 2009), coverage was adapted for NMT by Tu et al. (2016) and Mi et al. (2016), who both use a GRU to update the coverage vector each step. We find that a simpler approach - summing the attention distributions to obtain the coverage vector - suffices. In this respect our approach is similar to Xu et al. (2015), who apply a coverage-like method to image captioning, and Chen et al. (2016), who also incorporate a coverage mechanism (which they call 'distraction') as described in equation (11) into neural summarization of longer text.

_Temporal attention_ is a related technique that has been applied to NMT (Sankaran et al., 2016) and summarization (Nallapati et al., 2016). In this approach, each attention distribution is divided by the sum of the previous, which effectively dampens repeated attention. We tried this method but found it too destructive, distorting the signal from the attention mechanism and reducing performance. We hypothesize that an early intervention method such as coverage is preferable to a post hoc method such as temporal attention - it is better to _inform_ the attention mechanism to help it make better decisions, than to _override_ its decisions altogether. This theory is supported by the large boost that coverage gives our ROUGE scores (see Table 1), compared to the smaller boost given by temporal attention for the same task (Nallapati et al., 2016).

## 4 Dataset

We use the _CNN/Daily Mail_ dataset (Hermann et al., 2015; Nallapati et al., 2016), which contains online news articles (781 tokens on average) paired with multi-sentence summaries (3.75 sentences or 56 tokens on average). We used scripts supplied by Nallapati et al. (2016) to obtain the same version of the the data, which has 287,226 training pairs, 13,368 validation pairs and 11,490 test pairs. Both the dataset's published results (Nallapati et al., 2016, 2017) use the _anonymized_ version of the data, which has been pre-processed to replace each named entity, e.g., _The United Nations_, with its own unique identifier for the example pair, e.g., @entity5. By contrast, we operate directly on the original text (or _non-anonymized_ version of the data),2 which we believe is the favorable problem to solve because it requires no pre-processing.

Footnote 2: at www.github.com/abisee/pointer-generator

## 5 Experiments

For all experiments, our model has 256-dimensional hidden states and 128-dimensional word embeddings. For the pointer-generator models, we use a vocabulary of 50k words for both source and target - note that due to the pointer network's ability to handle O a smaller vocabulary size than Nallapati et al.'s (2016) 150k source and 60k target vocabularies. For the baseline model, we also try a larger vocabulary size of 150k.

Note that the pointer and the coverage mechanism introduce very few additional parameters to the network: for the models with vocabulary size 50k, the baseline model has 21,499,600 parameters, the pointer-generator adds 1153 extra parameters (\(w_{l^{\prime}}\), \(w_{s}\), \(w_{x}\) and \(b_{\text{ptr}}\) in equation 8), and coverage adds 512 extra parameters (\(w_{c}\) in equation 11).

Unlike Nallapati et al. (2016), we do not pre-train the word embeddings - they are learned from scratch during training. We train using Adagrad (Duchi et al., 2011) with learning rate 0.15 and an initial accumulator value of 0.1. (This was found to work best of Stochastic Gradient Descent, Adadelta, Momentum, Adam and RMSProp). We use gradient clipping with a maximum gradient norm of 2, but do not use any form of regularization. We use loss on the validation set to implement early stopping.

During training and at test time we truncate the article to 400 tokens and limit the length of the summary to 100 tokens for training and 120 tokens at test time.3 This is done to expedite training and testing, but we also found that truncating the article can _raise_ the performance of the model (see section 7.1 for more details). For training, we found it efficient to start with highly-truncated sequences, then raise the maximum length once converged. We train on a single Tesla K40m GPU with a batch size of 16. At test time our summaries are produced using beam search with beam size 4.

Footnote 3: The upper limit of 120 is mostly invisible: the beam search algorithm is self-stopping and almost never reaches the 120th step.

We trained both our baseline models for about 600,000 iterations (33 epochs) - this is similar to the 35 epochs required by Nallapati et al.'s (2016) best model. Training took 4 days and 14 hours for the 50k vocabulary model, and 8 days 21 hours for the 150k vocabulary model. We found the pointer-generator model quicker to train, requiring less than 230,000 training iterations (12.8 epochs); a total of 3 days and 4 hours. In particular, the pointer-generator model makes much quicker progress in the early phases of training. To obtain our final coverage model, we added the coverage mechanism with coverage loss weighted to \(\lambda=1\) (as described in equation 13), and trained for a further 3000 iterations (about 2 hours). In this time the coverage loss converged to about 0.2, down from an initial value of about 0.5. We also tried a more aggressive value of \(\lambda=2\); this reduced coverage loss but increased the primary loss function, thus we did not use it.

We tried training the coverage model without the loss function, hoping that the attention mechanism may learn by itself not to attend repeatedly to the same locations, but we found this to be ineffective, with no discernible reduction in repetition. We also tried training with coverage from the first

\begin{table}
\begin{tabular}{|l|c|c|c|c|c|} \hline  & \multicolumn{3}{c|}{ROUGE} & \multicolumn{2}{c|}{METEOR} \\ \cline{2-6}  & 1 & 2 & L & exact match & + stem/syn/para \\ \hline abstractive model (Nallapati et al., 2016)* & 35.46 & 13.30 & 32.65 & - & - \\ seq-to-seq + attn baseline (150k vocab) & 30.49 & 11.17 & 28.08 & 11.65 & 12.86 \\ seq-to-seq + attn baseline (50k vocab) & 31.33 & 11.81 & 28.83 & 12.03 & 13.20 \\ pointer-generator & 36.44 & 15.66 & 33.42 & 15.35 & 16.65 \\ pointer-generator + coverage & **39.53** & **17.28** & **36.38** & 17.32 & 18.72 \\ \hline lead-3 baseline (ours) & 40.34 & 17.70 & 36.57 & 20.48 & 22.21 \\ lead-3 baseline (Nallapati et al., 2017)* & 39.2 & 15.7 & 35.5 & - & - \\ extractive model (Nallapati et al., 2017)* & 39.6 & 16.2 & 35.3 & - & - \\ \hline \end{tabular}
\end{table}



Table 1: ROUGE F\({}_{1}\) and METEOR scores on the test set. Models and baselines in the top half are abstractive, while those in the bottom half are extractive. Those marked with * were trained and evaluated on the anonymized dataset, and so are not strictly comparable to our results on the original text. All our ROUGE scores have a 95% confidence interval of at most \(\pm\)0.25 as reported by the official ROUGE script. The METEOR improvement from the 50k baseline to the pointer-generator model, and from the pointer-generator to the pointer-generator+coverage model, were both found to be statistically significant using an approximate randomization test with \(p<0.01\).

iteration rather than as a separate training phase, but found that in the early phase of training, the coverage objective interfered with the main objective, reducing overall performance.

## 6 Results

### Preliminaries

Our results are given in Table 1. We evaluate our models with the standard ROUGE metric [10], reporting the F1 scores for ROUGE-1, ROUGE-2 and ROUGE-L (which respectively measure the word-overlap, bigram-overlap, and longest common sequence between the reference summary and the summary to be evaluated). We obtain our ROUGE scores using the pyrouge package.4 We also evaluate with the METEOR metric [1], both in exact match mode (rewarding only exact matches between words) and full mode (which additionally rewards matching stems, synonyms and paraphrases).5

Footnote 4: pypi.python.org/pypi/pyrouge/0.1.3

Footnote 5: www.cs.cmu.edu/~alavie/METEOR

In addition to our own models, we also report the lead-3 baseline (which uses the first three sentences of the article as a summary), and compare to the only existing abstractive [11] and extractive [11] models on the full dataset. The output of our models is available online.6

Footnote 6: www.github.com/abisee/pointer-generator

Given that we generate plain-text summaries but [11, 12] generate anonymized summaries (see Section 4), our ROUGE scores are not strictly comparable. There is evidence to suggest that the original-text dataset may result in higher ROUGE scores in general than the anonymized dataset - the lead-3 baseline is higher on the former than the latter. One possible explanation is that multi-word named entities lead to a higher rate of _n_-gram overlap. Unfortunately, ROUGE is the only available means of comparison with [11]. Nevertheless, given that the disparity in the lead-3 scores is (+1.1 ROUGE-1, +2.0 ROUGE-2, +1.1 ROUGE-L) points respectively, and our best model scores exceed [11] by (+4.07 ROUGE-1, +3.98 ROUGE-2, +3.73 ROUGE-L) points, we may estimate that we outperform the only previous abstractive system by at least 2 ROUGE points all-round.

### Observations

We find that both our baseline models perform poorly with respect to ROUGE and METEOR, and in fact the larger vocabulary size (150k) does not seem to help. Even the better-performing baseline (with 50k vocabulary) produces summaries with several common problems. Factual details are frequently reproduced incorrectly, often replacing an uncommon (but in-vocabulary) word with a more-common alternative. For example in Figure 1, the baseline model appears to struggle with the rare word _thwart_, producing _destabilize_ instead, which leads to the fabricated phrase _destabilize nigeria's economy_. Even more catastrophically, the summaries sometimes devolve into repetitive nonsense, such as the third sentence produced by the baseline model in Figure 1. In addition, the baseline model can't reproduce out-of-vocabulary words (such as _muhammadu buhari_ in Figure 1). Further examples of all these problems are provided in the supplementary material.

Our pointer-generator model achieves much better ROUGE and METEOR scores than the baseline, despite many fewer training epochs. The difference in the summaries is also marked: out-of-vocabulary words are handled easily, factual details are almost always copied correctly, and there are no fabrications (see Figure 1). However, repetition is still very common.

Our pointer-generator model with coverage improves the ROUGE and METEOR scores further, convincingly surpassing the best abstractive model

Figure 4: Coverage eliminates undesirable repetition. Summaries from our non-coverage model contain many duplicated _n_-grams while our coverage model produces a similar number as the **reference summaries**.

of Nallapati et al. (2016) by several ROUGE points. Despite the brevity of the coverage training phase (about 1% of the total training time), the repetition problem is almost completely eliminated, which can be seen both qualitatively (Figure 1) and quantitatively (Figure 4). However, our best model does not quite surpass the ROUGE scores of the lead-3 baseline, nor the current best extractive model (Nallapati et al., 2017). We discuss this issue in section 7.1.

## 7 Discussion

### Comparison with extractive systems

It is clear from Table 1 that extractive systems tend to achieve higher ROUGE scores than abstractive, and that the extractive lead-3 baseline is extremely strong (even the best extractive system beats it by only a small margin). We offer two possible explanations for these observations.

Firstly, news articles tend to be structured with the most important information at the start; this partially explains the strength of the lead-3 baseline. Indeed, we found that using only the first 400 tokens (about 20 sentences) of the article yielded significantly higher ROUGE scores than using the first 800 tokens.

Secondly, the nature of the task and the ROUGE metric make extractive approaches and the lead-3 baseline difficult to beat. The choice of content for the reference summaries is quite subjective - sometimes the sentences form a self-contained summary; other times they simply showcase a few interesting details from the article. Given that the articles contain 39 sentences on average, there are many equally valid ways to choose 3 or 4 highlights in this style. Abstraction introduces even more options (choice of phrasing), further decreasing the likelihood of matching the reference summary. For example, _smugglers profit from desperate migrants_ is a valid alternative abstractive summary for the first example in Figure 5, but it scores 0 ROUGE with respect to the reference summary. This inflexibility of ROUGE is exacerbated by only having one reference summary, which has been shown to lower ROUGE's reliability compared to multiple reference summaries (Lin, 2004a).

Due to the subjectivity of the task and thus the diversity of valid summaries, it seems that ROUGE rewards safe strategies such as selecting the first-appearing content, or preserving original phrasing. While the reference summaries _do_ sometimes deviate from these techniques, those deviations are unpredictable enough that the safer strategy obtains higher ROUGE scores on average. This may explain why extractive systems tend to obtain higher ROUGE scores than abstractive, and even extractive systems do not significantly exceed the lead-3 baseline.

To explore this issue further, we evaluated our systems with the METEOR metric, which rewards not only exact word matches, but also matching stems, synonyms and paraphrases (from a pre-defined list). We observe that all our models receive over 1 METEOR point boost by the inclusion of stem, synonym and paraphrase matching, indicating that they may be performing some abstraction. However, we again observe that the lead-3 baseline is not surpassed by our models. It may be that news article style makes the lead-3 baseline very strong with respect to any metric. We believe that investigating this issue further is an important direction for future work.

### How abstractive is our model?

We have shown that our pointer mechanism makes our abstractive system more reliable, copying factual details correctly more often. But does the ease of copying make our system any less _abstractive_?

Figure 6 shows that our final model's summaries contain a much lower rate of novel _n_-grams (i.e., those that don't appear in the article) than the reference summaries, indicating a lower degree of abstraction. Note that the baseline model produces novel _n_-grams more frequently - however, this statistic includes all the incorrectly copied words, _UNK_ tokens and fabrications alongside the good instances of abstraction.

Figure 5: Examples of highly abstractive reference summaries (bold denotes novel words).

In particular, Figure 6 shows that our final model copies whole article sentences 35% of the time; by comparison the reference summaries do so only 1.3% of the time. This is a main area for improvement, as we would like our model to move beyond simple sentence extraction. However, we observe that the other 65% encompasses a range of abstractive techniques. Article sentences are truncated to form grammatically-correct shorter versions, and new sentences are composed by stitching together fragments. Unnecessary interjections, clauses and parenthesized phrases are sometimes omitted from copied passages. Some of these abilities are demonstrated in Figure 1, and the supplementary material contains more examples.

Figure 7 shows two examples of more impressive abstraction - both with similar structure. The dataset contains many sports stories whose summaries follow the _X beat Y (score) on \(\langle day\rangle\)_template, which may explain why our model is most confidently abstractive on these examples. In general however, our model does not routinely produce summaries like those in Figure 7, and is not close to producing summaries like in Figure 5.

The value of the generation probability \(p_{\text{gen}}\) also gives a measure of the abstractiveness of our model. During training, \(p_{\text{gen}}\) starts with a value of about 0.30 then increases, converging to about 0.53 by the end of training. This indicates that the model first learns to mostly copy, then learns to generate about half the time. However at test time, \(p_{\text{gen}}\) is heavily skewed towards copying, with a mean value of 0.17. The disparity is likely due to the fact that during training, the model receives word-by-word supervision in the form of the reference summary, but at test time it does not. Nonetheless, the generator module is useful even when the model is copying. We find that \(p_{\text{gen}}\) is highest at times of uncertainty such as the beginning of sentences, the join between stitched-together fragments, and when producing periods that truncate a copied sentence. Our mixture model allows the network to copy while simultaneously consulting the language model - enabling operations like stitching and truncation to be performed with grammaticality. In any case, encouraging the pointer-generator model to write more abstractively, while retaining the accuracy advantages of the pointer module, is an exciting direction for future work.

## 8 Conclusion

In this work we presented a hybrid pointer-generator architecture with coverage, and showed that it reduces inaccuracies and repetition. We applied our model to a new and challenging long-text dataset, and significantly outperformed the abstractive state-of-the-art result. Our model exhibits many abstractive abilities, but attaining higher levels of abstraction remains an open research question.

## 9 Acknowledgment

We thank the ACL reviewers for their helpful comments. This work was begun while the first author was an intern at Google Brain and continued at Stanford. Stanford University gratefully acknowledges the support of the DARPA DEFT Program AFRL contract no. FA8750-13-2-0040. Any opinions in this material are those of the authors alone.

Figure 6: Although our best model is abstractive, it does not produce novel \(n\)-grams (i.e., \(n\)-grams that don’t appear in the source text) as often as the **reference summaries**. The baseline model produces more novel \(n\)-grams, but many of these are erroneous (see section 7.2).

Figure 7: Examples of abstractive summaries produced by our model (bold denotes novel words).

## References

* Bahdanau et al. (2015) Dzmitry Bahdanau, Kyunghyun Cho, and Yoshua Bengio. 2015. Neural machine translation by jointly learning to align and translate. In _International Conference on Learning Representations_.
* Chen et al. (2016) Qian Chen, Xiaodan Zhu, Zhenhua Ling, Si Wei, and Hui Jiang. 2016. Distraction-based neural networks for modeling documents. In _International Joint Conference on Artificial Intelligence_.
* Cheung and Penn (2014) Jackie Chi Kit Cheung and Gerald Penn. 2014. Unsupervised sentence enhancement for automatic summarization. In _Empirical Methods in Natural Language Processing_.
* Chopra et al. (2016) Sumit Chopra, Michael Auli, and Alexander M Rush. 2016. Abstractive sentence summarization with attentive recurrent neural networks. In _North American Chapter of the Association for Computational Linguistics_.
* Denkowski and Lavie (2014) Michael Denkowski and Alon Lavie. 2014. Meteor universal: Language specific translation evaluation for any target language. In _EACL 2014 Workshop on Statistical Machine Translation_.
* Duchi et al. (2011) John Duchi, Elad Hazan, and Yoram Singer. 2011. Adaptive subgradient methods for online learning and stochastic optimization. _Journal of Machine Learning Research_ 12:2121-2159.
* Gu et al. (2016) Jiatao Gu, Zhengdong Lu, Hang Li, and Victor OK Li. 2016. Incorporating copying mechanism in sequence-to-sequence learning. In _Association for Computational Linguistics_.
* Gulcehre et al. (2016) Caglar Gulcehre, Sungjin Ahn, Ramesh Nallapati, Bowen Zhou, and Yoshua Bengio. 2016. Pointing the unknown words. In _Association for Computational Linguistics_.
* Hermann et al. (2015) Karl Moritz Hermann, Tomas Kocisky, Edward Grefenstette, Lasse Espeholt, Will Kay, Mustafa Suleyman, and Phil Blunsom. 2015. Teaching machines to read and comprehend. In _Neural Information Processing Systems_.
* Jing (2000) Hongyan Jing. 2000. Sentence reduction for automatic text summarization. In _Applied natural language processing_.
* Koehn (2009) Philipp Koehn. 2009. _Statistical machine translation_. Cambridge University Press.
* Kupiec et al. (1995) Julian Kupiec, Jan Pedersen, and Francine Chen. 1995. A trainable document summarizer. In _International ACM SIGIR conference on Research and development in information retrieval_.
* Lin (2004a) Chin-Yew Lin. 2004a. Looking for a few good metrics: Automatic summarization evaluation-how many samples are enough? In _NACSIS/NII Test Collection for Information Retrieval (NTCIR) Workshop_.
* Lin (2004b) Chin-Yew Lin. 2004b. Rouge: A package for automatic evaluation of summaries. In _Text summarization branches out: ACL workshop_.
* Merity et al. (2016) Stephen Merity, Caiming Xiong, James Bradbury, and Richard Socher. 2016. Pointer sentinel mixture models. In _NIPS 2016 Workshop on Multi-class and Multi-label Learning in Extremely Large Label Spaces_.
* Mi et al. (2016) Haitao Mi, Baskaran Sankaran, Zhiguo Wang, and Abe Ittycheriah. 2016. Coverage embedding models for neural machine translation. In _Empirical Methods in Natural Language Processing_.
* Miao and Blunsom (2016) Yishu Miao and Phil Blunsom. 2016. Language as a latent variable: Discrete generative models for sentence compression. In _Empirical Methods in Natural Language Processing_.
* Nallapati et al. (2017) Ramesh Nallapati, Feifei Zhai, and Bowen Zhou. 2017. SummauNuNTer: A recurrent neural network based sequence model for extractive summarization of documents. In _Association for the Advancement of Artificial Intelligence_.
* Nallapati et al. (2016) Ramesh Nallapati, Bowen Zhou, Cicero dos Santos, Caglar Gulcehre, and Bing Xiang. 2016. Abstractive text summarization using sequence-to-sequence RNNs and beyond. In _Computational Natural Language Learning_.
* Paice (1990) Chris D Paice. 1990. Constructing literature abstracts by computer: techniques and prospects. _Information Processing & Management_ 26(1):171-186.
* Ranzato et al. (2016) Marc'Aurelio Ranzato, Sumit Chopra, Michael Auli, and Wojciech Zaremba. 2016. Sequence level training with recurrent neural networks. In _International Conference on Learning Representations_.
* Rush et al. (2015) Alexander M Rush, Sumit Chopra, and Jason Weston. 2015. A neural attention model for abstractive sentence summarization. In _Empirical Methods in Natural Language Processing_.
* Saggion and Poibeau (2013) Horacio Saggion and Thierry Poibeau. 2013. Automatic text summarization: Past, present and future. In _Multi-source, Multilingual Information Extraction and Summarization_, Springer, pages 3-21.
* Sankaran et al. (2016) Baskaran Sankaran, Haitao Mi, Yaser Al-Onaizan, and Abe Ittycheriah. 2016. Temporal attention model for neural machine translation. _arXiv preprint arXiv:1608.02927_.
* Sutskever et al. (2014) Ilya Sutskever, Oriol Vinyals, and Quoc V Le. 2014. Sequence to sequence learning with neural networks. In _Neural Information Processing Systems_.
* Suzuki and Nagata (2016) Jun Suzuki and Masaaki Nagata. 2016. RNN-based encoder-decoder approach with word frequency estimation. _arXiv preprint arXiv:1701.00138_.
* Sutskever et al. (2014)* Takase et al. (2016) Sho Takase, Jun Suzuki, Naoaki Okazaki, Tsutomu Hirao, and Masaaki Nagata. 2016. Neural headline generation on abstract meaning representation. In _Empirical Methods in Natural Language Processing_.
* Tu et al. (2016) Zhaopeng Tu, Zhengdong Lu, Yang Liu, Xiaohua Liu, and Hang Li. 2016. Modeling coverage for neural machine translation. In _Association for Computational Linguistics_.
* Vinyals et al. (2015) Oriol Vinyals, Meire Fortunato, and Navdeep Jaitly. 2015. Pointer networks. In _Neural Information Processing Systems_.
* Xu et al. (2015) Kelvin Xu, Jimmy Ba, Ryan Kiros, Kyunghyun Cho, Aaron C Courville, Ruslan Salakhutdinov, Richard S Zemel, and Yoshua Bengio. 2015. Show, attend and tell: Neural image caption generation with visual attention. In _International Conference on Machine Learning_.
* Zeng et al. (2016) Wenyuan Zeng, Wenjie Luo, Sanja Fidler, and Raquel Urtasun. 2016. Efficient summarization with read-again and copy mechanism. _arXiv preprint arXiv:1611.03382_.

**Supplementary Material**

This appendix provides examples from the test set, with side-by-side comparisons of the reference summaries and the summaries produced by our models. In each example:

* _italics_ denote out-of-vocabulary words
* red denotes factual errors in the summaries
* green shading intensity represents the value of the generation probability \(p_{\text{gen}}\)
* yellow shading intensity represents final value of the coverage vector at the end of final model's summarization process.

**Article (truncated):** andy murray came close to giving himself some extra preparation time for his wedding next week before ensuring that he still has unfinished tennis business to attend to. the world no 4 is into the semi-finals of the miami open, but not before getting a scare from 21 year-old austrian dominic _thiem_, who pushed him to 4-4 in the second set before going down 3-6 6-4, 6-1 in an hour and three quarters | murray was awaiting the winner from the last eight match between tomas berdych and argentina's juan monaco | prior to this tournament _thiem_ lost in the second round of a challenger event to soon-to-be new brit _aliza_ bedene | andy murray pumps his first after defeating dominic _thiem_ to reach the miami open semi finals. _murray_ throws his _sweatband_ into the crowd after completing a 3-6, 6-4, 6-1 victory in florida. murray shakes hands with _thiem_ who he described as a'strong guy'after the game. and murray has a fairly simple message for any of his fellow british tennis players who might be agitated about his imminent arrival into the home ranks : don't complain. instead the british no 1 believes his colleagues should use the assimilation of the world number 83, originally from slovenia, as motivation to better themselves.

**Reference Summary:**

british no 1 defeated dominic _thiem_ in miami open quarter finals.

andy murray celebrated his 500th career win in the previous round.

third seed will play the winner of tomas berdych and juan monaco in the semi finals of the atp masters 1000 event in key biscayne.

**Baseline:**

andy murray beat UNK bedene 6-3, 6-4, 6-1 in an hour and three quarters.

british no 1 believes his colleagues should use the maze of the world number 83, originally from slovenia, as motivation to better themselves.

**Pointer-Generator, No Coverage:**

andy murray came close to giving himself some extra preparation for his wedding next week before getting a scare from 21 year-old austrian dominic _thiem_.

the world no 4 is into the semi-finals of the miami open, but not before getting a scare from 21 year-old austrian dominic _thiem_.

**Pointer-Generator, With Coverage:**

andy murray defeated dominic _thiem_ 3-6 6-4, 6-1 in an hour and three quarters | murray was awaiting the winner from the last eight match between tomas berdych and argentina's juan monaco | prior to this tournament thiem lost in the second round of a challenger event to soon-to-be new brit _aliza_ bedene.

Figure 8: The baseline model reports the wrong score _6-3_, substitutes _bedene_ for _thiem_ and struggles with the uncommon word _assimilation_. The pointer-network models accurately reproduce the out-of-vocabulary words _thiem_ and _aliza_. Note that the final model produces the novel word _defeated_ to incorporate several fragments into a single sentence.

**Article (truncated):**: muster have signed new zealand international francis _saili_ on a two-year deal. utility back _saili_, who made his all blacks debut against argentina in 2013, will move to the province later this year after the completion of his 2015 contractual commitments. the 24-year-old currently plays for _auckland-based_ super rugby side the blues and was part of the new zealand under-20 side that won the junior world championship in italy in 2011 _saili_'s signature is something of a coup for muster and head coach anthony foley believes he will be a great addition to their backline. francis _saili_ has signed a two-year deal to join muster and will link up with them later this year,' we are really pleased that francis has committed his future to the province,'foley told minuster's official website.'he is a talented centre with an impressive _skill-set_ and he possesses the physical attributes to excel in the northern hemisphere.'i believe he will be a great addition to our backline and we look forward to welcoming him to minuster.'_saili_ has been capped twice by new zealand and was part of the under 20 side that won the junior championship in 2011.

**Reference Summary:**

utility back francis _saili_ will join up with minuster later this year.

the new zealand international has signed a two-year contract.

_saili_ made his debut for the all blacks against argentina in 2013.

**Baseline:**

dutch international francis UNK has signed a two-year deal to join irish UNK super rugby side the blues.

UNK's signature is something of a coup for minuster and his head coach anthony foley believes he will be a great addition to their respective prospects.

UNK has been capped twice by new zealand.

**Pointer-Generator, No Coverage:**

new zealand international francis _saili_ will move to the province later this year.

utility back _saili_ made his all blacks debut against argentina in 2013.

utility back _saili_ will move to the province later this year.

**Pointer-Generator, With Coverage:**

francis _saili_ has signed a two-year deal to join minuster later this year.

the 24-year-old was part of the new zealand under-20 side that won the junior world championship in italy in 2011.

_saili_ is signature is something of a coup for minuster and head coach anthony foley.

Figure 9: The baseline model incorrectly substitutes _dutch_ for _new zealand_ (perhaps reflecting the European bias of the dataset), fabricates _irish_, and struggles with out-of-vocabulary words _saili_ and _auckland-based_. Though it is not clear why, the phrase _addition to our backline_ is changed to the nonsensical _addition to their respective prospects_. The pointer-generator model fixes these accuracy problems, and the addition of coverage fixes the repetition problem. Note that the final model skips over large passages of text to produce shorter sentences.

**Article (truncated):** right from the moment he breezed through the doors at old trafford, louis van gaal was a man with a plan. the first season, he stated, would see him deliver manchester united back into their rightful place in the champions league - he would restore them to the premier league top four but _loftier_ aims of silverware would have to wait. his three-year vision would allow for such thoughts but, first things first, united needed to be dining from european football's top table again, louis van gaal is close to delivering his _first-season_ aim of returning man united into champions league. Wayne rooney smashes home during manchester united's 3-1 win over aston villa on saturday - united's win over aston villa took them third, eight points ahead of fifth-placed liverpool in the table. april 12 manchester city ( h ). april 18 chelsea ( a ). april 26 everton ( a ). may 2 west bromwich albion ( h ). may 9 crystal palace ( a ). may 17 arsenal ( h ). may 24 hull city ( a ). one season out of the champions league was far from ideal, but two seasons would be an absolute disaster and something, he understood, that would not be tolerated. in november, even that was looking optimistic. a 1-0 defeat to manchester city meant that united had taken just 13 points from their opening 10 matches - it was their worst start to a league campaign since 1986, when ron Atkinson only lasted until november.

**Reference Summary:**

man united have an eight-point cushion from _fifth-place_ liverpool.

van gaal looks likely to deliver on his promise of top four finish.

but the dutchman has a three-year vision mapped out.

next season will have to see united mount sustained challenge for title.

they must also reach the later stages of the champions league.

**Baseline:**

manchester united beat aston villa 3-1 at old trafford on saturday.

louis van gaal is close to delivering his UNK aim of returning man united into the premier league top four.

louis van gaal is close to delivering his UNK aim of returning man united into champions league.

**Pointer-Generator, No Coverage:**

louis van gaal is close to delivering his _first-season_ aim of returning man united into champions league.

united's win over aston villa took them third, eight points ahead of fifth-placed liverpool in the table.

louis van gaal is close to delivering his _first-season_ aim of returning man united into champions league.

**Pointer-Generator, With Coverage:**

manchester united beat aston villa 3-1 at old trafford on saturday -

louis van gaal is close to delivering his _first-season_ aim of returning man united into champions league -

united needed to be dining from european football's top table again -

Figure 10: In this example, both our baseline model and final model produce a completely abstractive first sentence, using a novel word _beat_.

**Article (truncated):** having been on the receiving end of a 6-1 thumping, a defeat like that could be justifiably met with a backlash by angry supporters. watching a 3-1 first leg aggregate advantage turn into a 7-4 deficit come the end of the reverse encounter too could send many fans _applectic_ at the capitulation of their side. however that doesn't appear the case for those devoted to porto | porto supporters gave their team a hero's welcome following their 6-1 defeat at bayern munich on tuesday. porto star striker jackson martinez was one of many players to look perplexed by their warm reception | porto boss _julen lopetegui_ ( left ) was hugged by fans congratulating him on their champions league run | police escorts were needed to keep the delirious supporters at bay as the porto team bus drove past. the team bus was met with a cacophony of noise from porto supporters proudly chanting about their club. on their return from a humiliating champions league quarter-final loss at the hands of bayern munich on tuesday night, the squad were given a heroes reception as they arrived back in portugal. in the early hours of wednesday morning, fans mobbed the squad congratulating them on their run in the tournament. star striker jackson martinez and ricardo _quaresma_ were one of many porto players who looked perplexed as they were hugged by fans before they making their way on to the team bus - set upon a cacophony of _fiercely-proud_ chanting. it was the first time that porto, who had been unbeaten in this season's tournament up until tuesday night, had reached the quarter-finals of the champions league since the 2008-09 season.

**Reference Summary:**

bayern munich beat porto 6-1 in their champions league tie on tuesday.

result saw bayern win quarter-final encounter 7-4 on aggregate.

it was the first-time porto had reached that stage since the 2008-09 season.

**Baseline:**

porto beat bayern munich 2-0 in the champions league on tuesday night.

porto star james UNK was one of many players involved in the match.

the squad were given a trophy as they arrived back in portugal.

**Pointer-Generator, No Coverage:**

porto star striker jackson martinez was one of many players to look perplexed by their warm reception | porto star striker jackson martinez was one of many players to look perplexed by their warm reception.

**Pointer-Generator, With Coverage:**

porto star striker jackson martinez was one of many players to look perplexed by their warm reception | porto boss julen lopetegui was hugged by fans congratulating him on their champions league run | however that doesn't appear the case for those devoted to porto | police escorts were needed to keep the delirious supporters at bay |

Figure 11: The baseline model makes several factual inaccuracies: it claims _porto_ beat _bayern munich_ not vice versa, the score is changed from _7-4_ to _2-0_, _jackson_ is changed to _james_ and _a heroes reception_ is replaced with _a trophy_. Our final model produces sentences that are individually accurate, but they do not make sense as a whole. Note that the final model omits the parenthesized phrase _( left )_ from its second sentence.

**Article:** ( cnn ) " it's showtime! " michael keaton paid homage = ever so slightly - to his roles in " _beetlejuice_ " and " _batman_ " in his third turn hosting " saturday night live " this weekend. keaton acknowledged in his opening monologue that a lot has changed since he first hosted the comedy sketch show in 1982 "'i had a baby - he's 31. i also have a new girlfriend - she's 28, " he said. fans who were hoping for a full-blown revival of keaton's most memorable characters might have been a little disappointed. snl cast members _taran killam_ and bobby moynihan begged the actor with a song to " play " batman and _beetlejuice_ with them. all they got in response were a couple of one-liners. overall, keaton's performance drew high marks from viewers and critics for its " deadpan " manner and " unpredictable _weirdness_, " in the words of _a.v_. club's dennis perkins. fans also delighted in a cameo from " walking dead " star norman _reedus_ during weekend update. keaton scored some laughs from the audience as an ad executive who's not very good at his job, a confused grandfather and a high school teacher who gets asked to the prom in a riff on the romantic comedy " she's all that. " other _crowd-pleasing_ spots included a scientology parody music video and a news conference _spoofing_ the ncaa _student-athlete_ debate. the show also poked fun at cnn with cast member cecily strong playing anchor brooke baldwin. baldwin said on twitter that she's taking it as a " crazy compliment " and shared a clip from the skit.

**Reference Summary:**

michael keaton hosted " saturday night live " for the first time in 1982.

in 2015, his nods to starring roles in " _beetlejuice_ " and " batman " are brief.

**Baseline:**

" snl " wins " saturday night live ".

keaton acknowledged in his opening " saturday night live ".

keaton acknowledged in his opening night's " UNK ".

the show also pokes fun at cnn with cast member mariah carey.

**Pointer-Generator, No Coverage:**

" _beetlejuice_ " michael keaton paid homage to his roles in " _beetlejuice_ " and "'batman " in his third turn hosting " saturday night live " this weekend.

keaton acknowledged in his opening monologue that a lot has changed since he first hosted the comedy sketch show in 1982.

**Pointer-Generator, With Coverage:**

michael keaton paid homage to his roles in " _beetlejuice_ " and " batman " in his third turn hosting " saturday night live "

**Article (truncated):** they are supposed to be the dream team who can solve the conundrum of how to win the election. but david cameron and boris johnson were left scratching their heads today as they struggled with a children's jigsaw teaching toddlers about the seasons. as the london mayor tried to hammer ill-fitting pieces together with his hands! the prime minister tried out what could be a new election slogan! telling him :'if in doubt, wedge it in.'after being put right by a four-year-old who spotted their errors, the pair had more fun finger painting with tory blue paint. david cameron and boris johnson were left stumped by the puzzle at advantage children's day nursery in _surbiton_, as three-year-old stephanie looked on. when they tried to put the puzzle back together, they hit trouble after it proved to be more difficult than expected! the conservative duo made their first appearance together on the campaign trail with a visit to advantage day nursery in _surbiton_, south west london. they were supposed to be highlighting tory plans to double free childcare for 600,000 children aged three and four. they sat at a table with joshua and stephanie, both aged three, and four-year-olds hamish and leo where they broke up a puzzle which depicted the four seasons. when they tried to put it back together, they hit trouble after it proved to be more difficult than expected.

**Reference Summary:**

david cameron and boris johnson visit nursery to promote childcare.

due left _flummoxed_ by jigsaw aimed at teaching children about seasons.

london mayor resorted to brute force to hammer wrong pieces together.

prime minister gave his approval, telling boris :'if in doubt, wedge it in '.

**Baseline:**

david cameron and boris johnson were left mystified by the puzzle.

they were at the nursery in UNK to promote a tory pledge to double free childcare for 25 children aged three and four.

the pair were at the nursery in UNK to promote a tory pledge to double free childcare for children aged three and four.

**Pointer-Generator, No Coverage:**

london mayor tried to hammer ill-fitting pieces together with his hands.

they were supposed to be highlighting tory plans to double free childcare.

they were supposed to be highlighting tory plans to double free childcare.

they were supposed to be highlighting tory plans to double free childcare.

**Pointer-Generator, With Coverage:**

london mayor tried to hammer ill-fitting pieces together with his hands!

prime minister tried out what could be a new election slogan!

but they hit trouble after it proved to be more difficult than expected!

Figure 13: The baseline model appropriately replaces _stumped_ with novel word _mystified_. However, the reference summary chooses _flummoxed_ (also novel) so the choice of _mystified_ is not rewarded by the ROUGE metric. The baseline model also incorrectly substitutes _600,000_ for _25_. In the final model’s output we observe that the generation probability is largest at the beginning of sentences (especially the first verb) and on periods.

**Article (truncated):**: lagos, nigeria ( cnn ) a day after winning nigeria's presidency, _muhammadu bubari_ told cnn's christiane amanpour that he plans to aggressively fight corruption that has long plagued nigeria and go after the root of the nation's unrest. _buhari_ said he 'll " rapidly give attention " to curbing violence in the northeast part of nigeria, where the terrorist group boko haram operates. by cooperating with neighboring nations chad, cameroon and niger, he said his administration is confident it will be able to thwart criminals and others contributing to nigeria's instability. for the first time in nigeria's history, the opposition defeated the ruling party in democratic elections. _buhari_ defeated incumbent goodluck jonathan by about 2 million votes, according to nigeria's independent national electoral commission. the win comes after a long history of military rule, coups and botched attempts at democracy in africa's most populous nation.

**Reference Summary:**

_muhammadu bubari_ tells cnn's christiane amanpour that he will fight corruption in nigeria. nigeria is the most populous country in africa and is grappling with violent boko haram extremists. nigeria is also africa's biggest economy, but up to 70 % of nigerians live on less than a dollar a day.

**Baseline:**

UNK UNK says his administration is confident it will be able to destabilize nigeria's economy. UNK says his administration is confident it will be able to thwart criminals and other nigerians. he says the country has long nigeria and nigeria's economy.

**Pointer-Generator, No Coverage:**

_muhammadu bubari_ says he plans to aggressively fight corruption in the northeast part of nigeria. he says he 'll " rapidly give attention " to curbing violence in the northeast part of nigeria. he says his administration is confident it will be able to thwart criminals.

**Pointer-Generator, With Coverage:**

_muhammadu bubari_ says he plans to aggressively fight corruption that has long plagued nigeria. he says his administration is confident it will be able to thwart criminals. the win comes after a long history of military rule, coups and botched attempts at democracy in africa's most populous nation.

Figure 14: The baseline model incorrectly changes _thwart criminals and others contributing to nigeria’s instability_ to _destabilize nigeria’s economy_ – which has a mostly opposite meaning. It also produces a nonsensical sentence. Note that our final model produces the novel word _says_ to paraphrase _told cnn ’s christiane amanpour_.

**Article:**: cairo ( cnn ) at least 12 people were killed sunday, and more injured, in separate attacks on a police station, a checkpoint and along a highway in egypt's northern sinai, authorities said. six people, including one civilian, were killed when a car bomb exploded near the police station in _al-arish_, capital of north sinai, health ministry spokesman _hossam abdel-ghafar_ told ahram online. he said 40 people were injured. ansar beit _al-maqdis_, an isis affiliate, claimed responsibility for the attack, which came hours after another operation that the group also claimed. in that earlier attack, a first lieutenant, a sergeant and four _conscripts_ were killed when their armored vehicle was attacked on the highway from _al-arish_ to sheikh _zaweid_ in northern sinai, the military said. two other soldiers were injured and taken to a military hospital. ansar beit _al-maqdis_ has claimed many attacks against the army and police in sinai. a third attack sunday on a checkpoint in rafah left three security personnel injured, after unknown assailants opened fire at them, according to state media. the attacks come as the military announced a reshuffle of several senior military positions, state media reported. among those being replaced are the generals in charge of military intelligence and egypt's second field army, which is spearheading the battle against the insurgents in the northern sinai. egypt's army has been fighting a decade-long militant islamist insurgency, which has spiked since the ouster of muslim brotherhood president mohamed morsy in the summer of 2013. hundreds of police and soldiers, as well as civilians, have been killed in militant attacks in the past months. ian lee reported from cairo. anas hamdan reported from atlanta.

**Reference Summary:**

six people, including one civilian, are killed when a car bomb explodes near a police station. six others are killed when their armored vehicle is attacked on a highway in northern sinai.

**nasar beit _al-maqdis_, an isis affiliate, claims responsibility.

**Baseline:**

he says the attacks come after another operation that killed 12. the attacks come as military announced a u.n. peacekeeping force in northern sinai.

**Pointer-Generator, No Coverage:**

ansar beit _al-maqdis_, an isis affiliate, claimed responsibility for the attack.

ansar beit _al-maqdis_, an isis affiliate, claimed responsibility for the attack.

the attacks come as the military announced a reshuffle of several senior military positions.

**Pointer-Generator, With Coverage:**

six people, including one civilian, were killed when a car bomb explodes near the police station, an isis affiliate, claimed responsibility for the attack.

ansar beit _al-maqdis_, an isis affiliate, claimed responsibility for the attack, army has been fighting a decade-long militant islamist insurgency, a

Figure 15: The baseline model fabricates a completely false detail about _a u.n. peacekeeping force_ that is not mentioned in the article. This is most likely inspired by a connection between U.N. peacekeeping forces and _northern sinai_ in the training data. The pointer-generator model is more accurate, correctly reporting the _reshuffle of several senior military positions_.