![img](img/Acknowledgment_0.png)
## Abstract
Neural sequence-to-sequence models have provided a viable new approach for _abstractive_ text summarization (meaning they are not restricted to simply selecting and rearranging passages from the original text). However, these models have two shortcomings: they are liable to reproduce factual details inaccurately, and they tend to repeat themselves. In this work we propose a novel architecture that augments the standard sequence-to-sequence attentional model in two orthogonal ways. First, we use a hybrid pointer-generator network that can copy words from the source text via _pointing_, which aids accurate reproduction of information, while retaining the ability to produce novel words through the _generator_. Second, we use _coverage_ to keep track of what has been summarized, which discourages repetition. We apply our model to the _CNN / Daily Mail_ summarization task, outperforming the current abstractive state-of-the-art by at least 2 ROUGE points.
## Introduction
![img](img/Introduction_0.png)

![img](img/Introduction_1.png)
Summarization is the task of condensing a piece of text to a shorter version that contains the main information from the original. There are two broad approaches to summarization: _extractive_ and _abstractive_. _Extractive methods_ assemble summaries exclusively from passages (usually whole sentences) taken directly from the source text, while _abstractive methods_ may generate novel words and phrases not featured in the source text - as a human-written abstract usually does. The extractive approach is easier, because copying large chunks of text from the source document ensures baseline levels of grammaticality and accuracy. On the other hand, sophisticated abilities that are crucial to high-quality summarization, such as paraphrasing, generalization, or the incorporation of real-world knowledge, are possible only in an abstractive framework (see Figure 5).

Due to the difficulty of abstractive summarization, the great majority of past work has been extractive [19, 14, 20, 21]. However, the recent success of _sequence-to-sequence_ models [23],





et al., 2014), in which recurrent neural networks (RNNs) both read and freely generate text, has made abstractive summarization viable (Chopra et al., 2016; Nallapati et al., 2016; Rush et al., 2015; Zeng et al., 2016). Though these systems are promising, they exhibit undesirable behavior such as inaccurately reproducing factual details, an inability to deal with out-of-vocabulary (OOV) words, and repeating themselves (see Figure 1).

In this paper we present an architecture that addresses these three issues in the context of multi-sentence summaries. While most recent abstractive work has focused on headline generation tasks (reducing one or two sentences to a single headline), we believe that longer-text summarization is both more challenging (requiring higher levels of abstraction while avoiding repetition) and ultimately more useful. Therefore we apply our model to the recently-introduced _CNN/ Daily Mail_ dataset (Hermann et al., 2015; Nallapati et al., 2016), which contains news articles (39 sentences on average) paired with multi-sentence summaries, and show that we outperform the state-of-the-art abstractive system by at least 2 ROUGE points.

Our hybrid _pointer-generator_ network facilitates copying words from the source text via _pointing_(Vinyals et al., 2015), which improves accuracy and handling of OOV words, while retaining the ability to _generate_ new words. The network, which can be viewed as a balance between extractive and abstractive approaches, is similar to Gu et al.'s (2016) CopyNet and Miao and Blunsom's (2016) Forced-Attention Sentence Compression, that were applied to short-text summarization. We propose a novel variant of the _coverage vector_(Tu et al., 2016) from Neural Machine Translation, which we use to track and control coverage of the source document. We show that coverage is remarkably effective for eliminating repetition.
## Our Models
![img](img/Our Models_0.png)
In this section we describe (1) our baseline sequence-to-sequence model, (2) our pointer-generator model, and (3) our coverage mechanism that can be added to either of the first two models. The code for our models is available online.1

Footnote 1: www.github.com/abisee/pointer-generator

### Sequence-to-sequence attentional model

Our baseline model is similar to that of Nallapati et al. (2016), and is depicted in Figure 2. The tokens of the article \(w_{i}\) are fed one-by-one into the encoder (a single-layer bidirectional LSTM), producing a sequence of _encoder hidden states_\(h_{i}\). On each step \(t\), the decoder (a single-layer unidirectional LSTM) receives the word embedding of the previous word (while training, this is the previous word of the reference summary; at test time it is the previous word emitted by the decoder), and has _decoder state_\(s_{t}\). The _attention distribution_\(a^{t}\) is calculated as in Bahdanau et al. (2015):

\[e^{\prime}_{i} =v^{T}\tanh(W_{h}h_{i}+W_{s}s_{t}+b_{\text{attn}}) \tag{1}\] \[a^{t} =\text{softmax}\big{(}e^{\prime}\big{)} \tag{2}\]

where \(v\), \(W_{h}\), \(W_{s}\) and \(b_{\text{attn}}\) are learnable parameters. The attention distribution can be viewed as





a probability distribution over the source words, that tells the decoder where to look to produce the next word. Next, the attention distribution is used to produce a weighted sum of the encoder hidden states, known as the _context vector_\(h_{t}^{*}\):

\[h_{t}^{*}=\sum_{i}d_{i}^{\prime}h_{i} \tag{3}\]

The context vector, which can be seen as a fixed-size representation of what has been read from the source for this step, is concatenated with the decoder state \(s_{t}\) and fed through two linear layers to produce the vocabulary distribution \(P_{\text{vocab}}\):

\[P_{\text{vocab}}=\text{softmax}(V^{\prime}(V[s_{t},h_{t}^{*}]+b)+b^{\prime}) \tag{4}\]

where \(V\), \(V^{\prime}\), \(b\) and \(b^{\prime}\) are learnable parameters. \(P_{\text{vocab}}\) is a probability distribution over all words in the vocabulary, and provides us with our final distribution from which to predict words \(w\):

\[P(w)=P_{\text{vocab}}(w) \tag{5}\]

During training, the loss for timestep \(t\) is the negative log likelihood of the target word \(w_{t}^{*}\) for that timestep:

\[\text{loss}_{t}=-\log P(w_{t}^{*}) \tag{6}\]

and the overall loss for the whole sequence is:

\[\text{loss}=\frac{1}{T}\sum_{t=0}^{T}\text{loss}_{t} \tag{7}\]

### Pointer-generator network

Our pointer-generator network is a hybrid between our baseline and a pointer network [20], as it allows both copying words via pointing, and generating words from a fixed vocabulary. In the pointer-generator model (depicted in Figure 3) the attention distribution \(a^{\prime}\) and context vector \(h_{t}^{*}\) are calculated as in section 2.1. In addition, the _generation probability_\(p_{\text{gen}}\in[0,1]\) for timestep \(t\) is calculated from the context vector \(h_{t}^{*}\), the decoder state \(s_{t}\) and the decoder input \(x_{t}\):

\[p_{\text{gen}}=\sigma(w_{h^{*}}^{T}h_{t}^{*}+w_{s}^{T}s_{t}+w_{x}^{T}x_{t}+b_{ \text{ptr}}) \tag{8}\]

where vectors \(w_{h^{*}}\), \(w_{s}\), \(w_{x}\) and scalar \(b_{\text{ptr}}\) are learnable parameters and \(\sigma\) is the sigmoid function. Next, \(p_{\text{gen}}\) is used as a soft switch to choose between _generating_ a word from the vocabulary by sampling from \(P_{\text{vocab}}\), or _copying_ a word from the input sequence by sampling from the attention distribution \(a^{\prime}\). For each document let the _extended vocabulary_ denote the union of the vocabulary, and all words appearing in the source document. We obtain the following probability distribution over the extended vocabulary:

\[P(w)=p_{\text{gen}}P_{\text{vocab}}(w)+(1-p_{\text{gen}})\sum_{i:w_{i}=w}a_{i} ^{\prime} \tag{9}\]

Note that if \(w\) is an out-of-vocabulary (OOV) word, then \(P_{\text{vocab}}(w)\) is zero; similarly if \(w\) does





not appear in the source document, then \(\sum_{i:w_{i}=w}a_{i}^{\prime}\) is zero. The ability to produce OOV words is one of the primary advantages of pointer-generator models; by contrast models such as our baseline are restricted to their pre-set vocabulary.

The loss function is as described in equations (6) and (7), but with respect to our modified probability distribution \(P(w)\) given in equation (9).

### Coverage mechanism

Repetition is a common problem for sequence-to-sequence models (Tu et al., 2016; Mi et al., 2016; Sankaran et al., 2016; Suzuki and Nagata, 2016), and is especially pronounced when generating multi-sentence text (see Figure 1). We adapt the _coverage model_ of Tu et al. (2016) to solve the problem. In our coverage model, we maintain a _coverage vector_\(c^{\prime}\), which is the sum of attention distributions over all previous decoder timesteps:

\[c^{\prime}=\sum_{t^{\prime}=0}^{t-1}a^{\prime} \tag{10}\]

Intuitively, \(c^{\prime}\) is a (unnormalized) distribution over the source document words that represents the degree of coverage that those words have received from the attention mechanism so far. Note that \(c^{0}\) is a zero vector, because on the first timestep, none of the source document has been covered.

The coverage vector is used as extra input to the attention mechanism, changing equation (1) to:

\[e_{i}^{\prime}=v^{T}\tanh(W_{h}h_{i}+W_{s}s_{t}+w_{c}c_{i}^{\prime}+b_{\rm attn }) \tag{11}\]

where \(w_{c}\) is a learnable parameter vector of same length as \(v\). This ensures that the attention mechanism's current decision (choosing where to attend next) is informed by a reminder of its previous decisions (summarized in \(c^{\prime}\)). This should make it easier for the attention mechanism to avoid repeatedly attending to the same locations, and thus avoid generating repetitive text.

We find it necessary (see section 5) to additionally define a _coverage loss_ to penalize repeatedly attending to the same locations:

\[\text{covloss}_{t}=\sum_{i}\min(a_{i}^{\prime},c_{i}^{\prime}) \tag{12}\]

Note that the coverage loss is bounded; in particular \(\text{covloss}_{t}\leq\sum_{i}a_{i}^{\prime}=1\). Equation (12) differs from the coverage loss used in Machine Translation. In MT, we assume that there should be a roughly one-to-one translation ratio; accordingly the final coverage vector is penalized if it is more or less than 1. Our loss function is more flexible: because summarization should not require uniform coverage, we only penalize the overlap between each attention distribution and the coverage so far - preventing repeated attention. Finally, the coverage loss, reweighted by some hyperparameter \(\lambda\), is added to the primary loss function to yield a new composite loss function:

\[\text{loss}_{t}=-\log P(w_{t}^{*})+\lambda\sum_{i}\min(a_{i}^{\prime},c_{i}^{ \prime}) \tag{13}\]
## Related Work
**Neural abstractive summarization.**Rush et al. (2015) were the first to apply modern neural networks to abstractive text summarization, achieving state-of-the-art performance on DUC-2004 and Gigaword, two sentence-level summarization datasets. Their approach, which is centered on the attention mechanism, has been augmented with recurrent decoders (Chopra et al., 2016), Abstract Meaning Representations (Takase et al., 2016), hierarchical networks (Nallapati et al., 2016), variational autoencoders (Miao and Blunsom, 2016), and direct optimization of the performance metric (Ranzato et al., 2016), further improving performance on those datasets.

However, large-scale datasets for summarization of _longer_ text are rare. Nallapati et al. (2016) adapted the DeepMind question-answering dataset (Hermann et al., 2015) for summarization, resulting in the _CNN/Daily Mail_ dataset, and provided the first abstractive baselines. The same authors then published a neural _extractive_ approach (Nallapati et al., 2017), which uses hierarchical RNNs to select sentences, and found that it significantly outperformed their abstractive result with respect to the ROUGE metric. To our knowledge, these are the only two published results on the full dataset.

Prior to modern neural methods, abstractive summarization received less attention than extractive summarization, but Jing (2000) explored cutting unimportant parts of sentences to create summaries, and Cheung and Penn (2014) explore sentence fusion using dependency trees.

**Pointer-generator networks.** The pointer network (Vinyals et al., 2015) is a sequence-to-sequence model that uses the soft attention distribution of Bahdanau et al. (2015) to produce an output sequence consisting of elements from the input sequence. The pointer network has been used to create hybrid approaches for NMT (Gulcehre et al., 2016), language modeling (Merity et al., 2016), and summarization (Gu et al., 2016; Gulcehre et al., 2016; Miao and Blunsom, 2016; Nallapati et al., 2016; Zeng et al., 2016).

Our approach is close to the Forced-Attention Sentence Compression model of Miao and Blunsom (2016) and the CopyNet model of Gu et al. (2016), with some small differences: (i) We calculate an explicit switch probability \(p_{\text{gen}}\), whereas Gu et al. induce competition through a shared softmax function. (ii) We recycle the attention distribution to serve as the copy distribution, but Gu et al. use two separate distributions. (iii) When a word appears multiple times in the source text, we sum probability mass from all corresponding parts of the attention distribution, whereas Miao and Blunsom do not. Our reasoning is that (i) calculating an explicit \(p_{\text{gen}}\) usefully enables us to raise or lower the probability of all generated words or all copy words at once, rather than individually, (ii) the two distributions serve such similar purposes that we find our simpler approach suffices, and (iii) we observe that the pointer mechanism often copies a word while attending to multiple occurrences of it in the source text.

Our approach is considerably different from that of Gulcehre et al. (2016) and Nallapati et al. (2016). Those works train their pointer components to activate only for out-of-vocabulary words or named entities (whereas we allow our model to freely learn when to use the pointer), and they do not mix the probabilities from the copy distribution and the vocabulary distribution. We believe the mixture approach described here is better for abstractive summarization - in section 6 we show that the copy mechanism is vital for accurately reproducing rare but in-vocabulary words, and in section 7.2 we observe that the mixture model enables the language model and copy mechanism to work together to perform abstractive copying.

**Coverage.** Originating from Statistical Machine Translation (Koehn, 2009), coverage was adapted for NMT by Tu et al. (2016) and Mi et al. (2016), who both use a GRU to update the coverage vector each step. We find that a simpler approach - summing the attention distributions to obtain the coverage vector - suffices. In this respect our approach is similar to Xu et al. (2015), who apply a coverage-like method to image captioning, and Chen et al. (2016), who also incorporate a coverage mechanism (which they call 'distraction') as described in equation (11) into neural summarization of longer text.

_Temporal attention_ is a related technique that has been applied to NMT (Sankaran et al., 2016) and summarization (Nallapati et al., 2016). In this approach, each attention distribution is divided by the sum of the previous, which effectively dampens repeated attention. We tried this method but found it too destructive, distorting the signal from the attention mechanism and reducing performance. We hypothesize that an early intervention method such as coverage is preferable to a post hoc method such as temporal attention - it is better to _inform_ the attention mechanism to help it make better decisions, than to _override_ its decisions altogether. This theory is supported by the large boost that coverage gives our ROUGE scores (see Table 1), compared to the smaller boost given by temporal attention for the same task (Nallapati et al., 2016).
## Dataset
We use the _CNN/Daily Mail_ dataset (Hermann et al., 2015; Nallapati et al., 2016), which contains online news articles (781 tokens on average) paired with multi-sentence summaries (3.75 sentences or 56 tokens on average). We used scripts supplied by Nallapati et al. (2016) to obtain the same version of the the data, which has 287,226 training pairs, 13,368 validation pairs and 11,490 test pairs. Both the dataset's published results (Nallapati et al., 2016, 2017) use the _anonymized_ version of the data, which has been pre-processed to replace each named entity, e.g., _The United Nations_, with its own unique identifier for the example pair, e.g., @entity5. By contrast, we operate directly on the original text (or _non-anonymized_ version of the data),2 which we believe is the favorable problem to solve because it requires no pre-processing.

Footnote 2: at www.github.com/abisee/pointer-generator
## Experiments
![img](img/Experiments_0.png)
For all experiments, our model has 256-dimensional hidden states and 128-dimensional word embeddings. For the pointer-generator models, we use a vocabulary of 50k words for both source and target - note that due to the pointer network's ability to handle O a smaller vocabulary size than Nallapati et al.'s (2016) 150k source and 60k target vocabularies. For the baseline model, we also try a larger vocabulary size of 150k.

Note that the pointer and the coverage mechanism introduce very few additional parameters to the network: for the models with vocabulary size 50k, the baseline model has 21,499,600 parameters, the pointer-generator adds 1153 extra parameters (\(w_{l^{\prime}}\), \(w_{s}\), \(w_{x}\) and \(b_{\text{ptr}}\) in equation 8), and coverage adds 512 extra parameters (\(w_{c}\) in equation 11).

Unlike Nallapati et al. (2016), we do not pre-train the word embeddings - they are learned from scratch during training. We train using Adagrad (Duchi et al., 2011) with learning rate 0.15 and an initial accumulator value of 0.1. (This was found to work best of Stochastic Gradient Descent, Adadelta, Momentum, Adam and RMSProp). We use gradient clipping with a maximum gradient norm of 2, but do not use any form of regularization. We use loss on the validation set to implement early stopping.

During training and at test time we truncate the article to 400 tokens and limit the length of the summary to 100 tokens for training and 120 tokens at test time.3 This is done to expedite training and testing, but we also found that truncating the article can _raise_ the performance of the model (see section 7.1 for more details). For training, we found it efficient to start with highly-truncated sequences, then raise the maximum length once converged. We train on a single Tesla K40m GPU with a batch size of 16. At test time our summaries are produced using beam search with beam size 4.

Footnote 3: The upper limit of 120 is mostly invisible: the beam search algorithm is self-stopping and almost never reaches the 120th step.

We trained both our baseline models for about 600,000 iterations (33 epochs) - this is similar to the 35 epochs required by Nallapati et al.'s (2016) best model. Training took 4 days and 14 hours for the 50k vocabulary model, and 8 days 21 hours for the 150k vocabulary model. We found the pointer-generator model quicker to train, requiring less than 230,000 training iterations (12.8 epochs); a total of 3 days and 4 hours. In particular, the pointer-generator model makes much quicker progress in the early phases of training. To obtain our final coverage model, we added the coverage mechanism with coverage loss weighted to \(\lambda=1\) (as described in equation 13), and trained for a further 3000 iterations (about 2 hours). In this time the coverage loss converged to about 0.2, down from an initial value of about 0.5. We also tried a more aggressive value of \(\lambda=2\); this reduced coverage loss but increased the primary loss function, thus we did not use it.

We tried training the coverage model without the loss function, hoping that the attention mechanism may learn by itself not to attend repeatedly to the same locations, but we found this to be ineffective, with no discernible reduction in repetition. We also tried training with coverage from the first




iteration rather than as a separate training phase, but found that in the early phase of training, the coverage objective interfered with the main objective, reducing overall performance.
## Results
![img](img/Results_0.png)

![img](img/Results_1.png)

![img](img/Results_2.png)
### Preliminaries

Our results are given in Table 1. We evaluate our models with the standard ROUGE metric [10], reporting the F1 scores for ROUGE-1, ROUGE-2 and ROUGE-L (which respectively measure the word-overlap, bigram-overlap, and longest common sequence between the reference summary and the summary to be evaluated). We obtain our ROUGE scores using the pyrouge package.4 We also evaluate with the METEOR metric [1], both in exact match mode (rewarding only exact matches between words) and full mode (which additionally rewards matching stems, synonyms and paraphrases).5

Footnote 4: pypi.python.org/pypi/pyrouge/0.1.3

Footnote 5: www.cs.cmu.edu/~alavie/METEOR

In addition to our own models, we also report the lead-3 baseline (which uses the first three sentences of the article as a summary), and compare to the only existing abstractive [11] and extractive [11] models on the full dataset. The output of our models is available online.6

Footnote 6: www.github.com/abisee/pointer-generator

Given that we generate plain-text summaries but [11, 12] generate anonymized summaries (see Section 4), our ROUGE scores are not strictly comparable. There is evidence to suggest that the original-text dataset may result in higher ROUGE scores in general than the anonymized dataset - the lead-3 baseline is higher on the former than the latter. One possible explanation is that multi-word named entities lead to a higher rate of _n_-gram overlap. Unfortunately, ROUGE is the only available means of comparison with [11]. Nevertheless, given that the disparity in the lead-3 scores is (+1.1 ROUGE-1, +2.0 ROUGE-2, +1.1 ROUGE-L) points respectively, and our best model scores exceed [11] by (+4.07 ROUGE-1, +3.98 ROUGE-2, +3.73 ROUGE-L) points, we may estimate that we outperform the only previous abstractive system by at least 2 ROUGE points all-round.

### Observations

We find that both our baseline models perform poorly with respect to ROUGE and METEOR, and in fact the larger vocabulary size (150k) does not seem to help. Even the better-performing baseline (with 50k vocabulary) produces summaries with several common problems. Factual details are frequently reproduced incorrectly, often replacing an uncommon (but in-vocabulary) word with a more-common alternative. For example in Figure 1, the baseline model appears to struggle with the rare word _thwart_, producing _destabilize_ instead, which leads to the fabricated phrase _destabilize nigeria's economy_. Even more catastrophically, the summaries sometimes devolve into repetitive nonsense, such as the third sentence produced by the baseline model in Figure 1. In addition, the baseline model can't reproduce out-of-vocabulary words (such as _muhammadu buhari_ in Figure 1). Further examples of all these problems are provided in the supplementary material.

Our pointer-generator model achieves much better ROUGE and METEOR scores than the baseline, despite many fewer training epochs. The difference in the summaries is also marked: out-of-vocabulary words are handled easily, factual details are almost always copied correctly, and there are no fabrications (see Figure 1). However, repetition is still very common.

Our pointer-generator model with coverage improves the ROUGE and METEOR scores further, convincingly surpassing the best abstractive model





of Nallapati et al. (2016) by several ROUGE points. Despite the brevity of the coverage training phase (about 1% of the total training time), the repetition problem is almost completely eliminated, which can be seen both qualitatively (Figure 1) and quantitatively (Figure 4). However, our best model does not quite surpass the ROUGE scores of the lead-3 baseline, nor the current best extractive model (Nallapati et al., 2017). We discuss this issue in section 7.1.
## Discussion
![img](img/Discussion_0.png)
### Comparison with extractive systems

It is clear from Table 1 that extractive systems tend to achieve higher ROUGE scores than abstractive, and that the extractive lead-3 baseline is extremely strong (even the best extractive system beats it by only a small margin). We offer two possible explanations for these observations.

Firstly, news articles tend to be structured with the most important information at the start; this partially explains the strength of the lead-3 baseline. Indeed, we found that using only the first 400 tokens (about 20 sentences) of the article yielded significantly higher ROUGE scores than using the first 800 tokens.

Secondly, the nature of the task and the ROUGE metric make extractive approaches and the lead-3 baseline difficult to beat. The choice of content for the reference summaries is quite subjective - sometimes the sentences form a self-contained summary; other times they simply showcase a few interesting details from the article. Given that the articles contain 39 sentences on average, there are many equally valid ways to choose 3 or 4 highlights in this style. Abstraction introduces even more options (choice of phrasing), further decreasing the likelihood of matching the reference summary. For example, _smugglers profit from desperate migrants_ is a valid alternative abstractive summary for the first example in Figure 5, but it scores 0 ROUGE with respect to the reference summary. This inflexibility of ROUGE is exacerbated by only having one reference summary, which has been shown to lower ROUGE's reliability compared to multiple reference summaries (Lin, 2004a).

Due to the subjectivity of the task and thus the diversity of valid summaries, it seems that ROUGE rewards safe strategies such as selecting the first-appearing content, or preserving original phrasing. While the reference summaries _do_ sometimes deviate from these techniques, those deviations are unpredictable enough that the safer strategy obtains higher ROUGE scores on average. This may explain why extractive systems tend to obtain higher ROUGE scores than abstractive, and even extractive systems do not significantly exceed the lead-3 baseline.

To explore this issue further, we evaluated our systems with the METEOR metric, which rewards not only exact word matches, but also matching stems, synonyms and paraphrases (from a pre-defined list). We observe that all our models receive over 1 METEOR point boost by the inclusion of stem, synonym and paraphrase matching, indicating that they may be performing some abstraction. However, we again observe that the lead-3 baseline is not surpassed by our models. It may be that news article style makes the lead-3 baseline very strong with respect to any metric. We believe that investigating this issue further is an important direction for future work.

### How abstractive is our model?

We have shown that our pointer mechanism makes our abstractive system more reliable, copying factual details correctly more often. But does the ease of copying make our system any less _abstractive_?

Figure 6 shows that our final model's summaries contain a much lower rate of novel _n_-grams (i.e., those that don't appear in the article) than the reference summaries, indicating a lower degree of abstraction. Note that the baseline model produces novel _n_-grams more frequently - however, this statistic includes all the incorrectly copied words, _UNK_ tokens and fabrications alongside the good instances of abstraction.





In particular, Figure 6 shows that our final model copies whole article sentences 35% of the time; by comparison the reference summaries do so only 1.3% of the time. This is a main area for improvement, as we would like our model to move beyond simple sentence extraction. However, we observe that the other 65% encompasses a range of abstractive techniques. Article sentences are truncated to form grammatically-correct shorter versions, and new sentences are composed by stitching together fragments. Unnecessary interjections, clauses and parenthesized phrases are sometimes omitted from copied passages. Some of these abilities are demonstrated in Figure 1, and the supplementary material contains more examples.

Figure 7 shows two examples of more impressive abstraction - both with similar structure. The dataset contains many sports stories whose summaries follow the _X beat Y (score) on \(\langle day\rangle\)_template, which may explain why our model is most confidently abstractive on these examples. In general however, our model does not routinely produce summaries like those in Figure 7, and is not close to producing summaries like in Figure 5.

The value of the generation probability \(p_{\text{gen}}\) also gives a measure of the abstractiveness of our model. During training, \(p_{\text{gen}}\) starts with a value of about 0.30 then increases, converging to about 0.53 by the end of training. This indicates that the model first learns to mostly copy, then learns to generate about half the time. However at test time, \(p_{\text{gen}}\) is heavily skewed towards copying, with a mean value of 0.17. The disparity is likely due to the fact that during training, the model receives word-by-word supervision in the form of the reference summary, but at test time it does not. Nonetheless, the generator module is useful even when the model is copying. We find that \(p_{\text{gen}}\) is highest at times of uncertainty such as the beginning of sentences, the join between stitched-together fragments, and when producing periods that truncate a copied sentence. Our mixture model allows the network to copy while simultaneously consulting the language model - enabling operations like stitching and truncation to be performed with grammaticality. In any case, encouraging the pointer-generator model to write more abstractively, while retaining the accuracy advantages of the pointer module, is an exciting direction for future work.
## Conclusion
In this work we presented a hybrid pointer-generator architecture with coverage, and showed that it reduces inaccuracies and repetition. We applied our model to a new and challenging long-text dataset, and significantly outperformed the abstractive state-of-the-art result. Our model exhibits many abstractive abilities, but attaining higher levels of abstraction remains an open research question.